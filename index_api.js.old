import express from 'express';
import axios from 'axios';
import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';
import { load } from 'cheerio';

dotenv.config();
const app = express();
const supabase = createClient(process.env.SB_URL, process.env.SB_SERVICE_KEY);

// Helper to check service_role key
function isServiceRole(key) {
  if (!key) return false;
  const parts = key.split('.');
  if (parts.length < 2) return false;
  try {
    const payload = JSON.parse(Buffer.from(parts[1], 'base64').toString('utf8'));
    return payload.role === 'service_role';
  } catch {
    return false;
  }
}

// Warn if SerpApi key is missing
if (!process.env.SERPAPI_KEY) {
  console.warn('SERPAPI_KEY is not defined. SerpApi searches will fail.');
}

app.use(express.json());

/**
 * Fallback: scrape Google search results page for 'Item <barcode>' with AU locale.
 */
async function fetchGoogleLinksCheerio(barcode) {
  try {
    const urls = [];
    const term = `Item ${barcode}`;
    const searchUrl = `https://www.google.com/search?q=${encodeURIComponent(term)}&hl=en-AU&gl=AU`;
    console.log(`Cheerio fallback searching Google for: ${term} (url: ${searchUrl})`);
    const res = await axios.get(searchUrl, {
      headers: {
        'User-Agent': 'Mozilla/5.0',
        'Accept-Language': 'en-AU,en;q=0.9'
      }
    });
    const $ = load(res.data);
    $('a[href^="/url?q="]').each((_, el) => {
      const href = $(el).attr('href') || '';
      const match = href.match(/^\/url\?q=([^&]+)/);
      if (match) {
        const link = decodeURIComponent(match[1]);
        if (link.startsWith('http') && !urls.includes(link)) {
          urls.push(link);
        }
      }
      if (urls.length >= 5) return false;
    });
    console.log('Cheerio fallback URLs:', urls);
    return urls;
  } catch (err) {
    console.error('Cheerio fallback error:', err.message || err);
    return [];
  }
}

/**
 * Fetch up to 5 result URLs for 'Item <barcode>' using SerpApi with AU locale.
 */
async function fetchGoogleLinks(barcode) {
  const links = [];
  const term = `Item ${barcode}`;
  try {
    const serpApiUrl = 'https://serpapi.com/search';
    const params = {
      api_key: process.env.SERPAPI_KEY,
      engine: 'google',
      q: term,
      num: 5,
      hl: 'en',        // language hint
      gl: 'au',        // geolocation country
      location: 'Australia'
    };
    console.log(`SerpApi searching for: ${term}`);
    console.log('SerpApi Params:', params);
    const resp = await axios.get(serpApiUrl, { params });
    const data = resp.data;
    const results = [
      ...(data.organic_results || []),
      ...(data.shopping_results || []),
      ...(data.inline_shopping_results || [])
    ];
    for (const item of results) {
      const link = item.link;
      if (typeof link === 'string' && !links.includes(link)) {
        links.push(link);
        if (links.length >= 5) break;
      }
    }
  } catch (err) {
    console.error('SerpApi search error:', err.message || err);
  }
  if (!links.length) {
    console.log('No SerpApi results, falling back to Cheerio.');
    return await fetchGoogleLinksCheerio(barcode);
  }
  console.log('Final URLs:', links);
  return links;
}

/**
 * Scrape a single URL for SDS info: name, manufacturer, size, and PDF link.
 */
async function scrapeProductInfo(url) {
  try {
    const { data } = await axios.get(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',
        'Accept-Language': 'en-AU,en;q=0.9',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Referer': 'https://www.google.com/'
      }
    });
    const $ = load(data);
    const name = $('h1').first().text().trim() || '';
    let manufacturer = $('[itemprop="manufacturer"], .brand').first().text().trim();
    if (!manufacturer) {
      try { manufacturer = new URL(url).hostname.replace(/^www\./, ''); } catch {}
    }
    const txt = $('body').text();
    const sizeMatch = txt.match(/(\d+(\.\d+)?\s?(ml|g|kg|oz|l))/i);
    const size = sizeMatch ? sizeMatch[0] : '';
    const sdsLinks = $('a').map((i, a) => {
      const $a = $(a);
      const href = $a.attr('href') || '';
      const text = $a.text() || '';
      if (/\.pdf$/i.test(href) && /sds|msds|safety/i.test(href + text)) {
        return href.startsWith('http') ? href : new URL(href, url).href;
      }
    }).get();
    const sdsUrl = sdsLinks.length ? sdsLinks[0] : '';
    return { url, name, manufacturer, size, sdsUrl };
  } catch (err) {
    console.warn(`Failed to scrape ${url}:`, err.message || err);
    return null;
  }
}

app.post('/scan', async (req, res) => {
  const { code } = req.body;
  const urls = await fetchGoogleLinks(code);
  const scraped = (await Promise.all(urls.map(scrapeProductInfo))).filter(Boolean);
  console.log('Scraped data:', scraped);
  const top = scraped[0] || {};
  const { name = '', manufacturer = '', size = '', sdsUrl = '' } = top;
  const { error } = await supabase.schema('public').from('products')
    .insert([{ barcode: code, product_name: name, manufacturer, size, weight: size, sds_url: sdsUrl }]);
  if (error) {
    console.error('Supabase insert error:', error.message || err);
    return res.status(500).json({ error: error.message || err });
  }
  res.json({ code, scraped });
});

app.listen(3000, () => console.log('Listening on port 3000'));
console.log('Supabase URL:', process.env.SB_URL);
console.log('Using service key?', isServiceRole(process.env.SB_SERVICE_KEY));
